type: edu
custom_name: Fight!
files:
- name: src/tictactoe/Main.kt
  visible: true
  text: |-
    package tictactoe

    fun main() {
        // write your code here
    }
  learner_created: false
- name: test/TicTacToeTest.java
  visible: false
  text: |
    import org.hyperskill.hstest.exception.outcomes.WrongAnswer;
    import org.hyperskill.hstest.stage.StageTest;
    import org.hyperskill.hstest.testcase.CheckResult;
    import org.hyperskill.hstest.testcase.TestCase;

    import java.util.ArrayList;
    import java.util.List;
    import java.util.Random;
    import java.util.stream.Collectors;

    enum FieldState {
        X, O, FREE;

        static FieldState get(char symbol) {
            switch (symbol) {
                case 'X': return X;
                case 'O': return O;
                case ' ':
                case '_':
                    return FREE;
                default: return null;
            }
        }
    }

    class TicTacToeField {

        final FieldState[][] field;

        TicTacToeField(FieldState[][] field) {
            this.field = new FieldState[3][3];
            for (int row = 0; row < 3; row++) {
                System.arraycopy(field[row], 0, this.field[row], 0, 3);
            }
        }

        TicTacToeField(String str) {
            field = new FieldState[3][3];
            for (int row = 0; row < 3; row++) {
                for (int col = 0; col < 3; col++) {
                    field[row][col] = FieldState.get(str.charAt((row * 3 + col)));
                }
            }
        }

        FieldState get(int x, int y) {
            return field[y - 1][x - 1];
        }

        boolean equalTo(TicTacToeField other) {
            for (int i = 0; i < 3; i++) {
                for (int j = 0; j < 3; j++) {
                    if (field[i][j] != other.field[i][j]) {
                        return false;
                    }
                }
            }
            return true;
        }

        boolean hasNextAs(TicTacToeField other) {
            boolean improved = false;
            for (int i = 0; i < 3; i++) {
                for (int j = 0; j < 3; j++) {
                    if (field[i][j] != other.field[i][j]) {
                        if (field[i][j] == FieldState.FREE && !improved) {
                            improved = true;
                        }
                        else {
                            return false;
                        }
                    }
                }
            }
            return improved;
        }

        boolean isCloseTo(TicTacToeField other) {
            return equalTo(other)
                || hasNextAs(other)
                || other.hasNextAs(this);
        }

        boolean isWinning(FieldState side) {
            if (side == FieldState.FREE) {
                return false;
            }

            if (get(1, 1) == side &&
                get(1, 2) == side &&
                get(1, 3) == side) {
                return true;
            }

            if (get(2, 1) == side &&
                get(2, 2) == side &&
                get(2, 3) == side) {
                return true;
            }

            if (get(3, 1) == side &&
                get(3, 2) == side &&
                get(3, 3) == side) {
                return true;
            }

            if (get(1, 1) == side &&
                get(2, 1) == side &&
                get(3, 1) == side) {
                return true;
            }

            if (get(1, 2) == side &&
                get(2, 2) == side &&
                get(3, 2) == side) {
                return true;
            }

            if (get(1, 3) == side &&
                get(2, 3) == side &&
                get(3, 3) == side) {
                return true;
            }

            if (get(1, 1) == side &&
                get(2, 2) == side &&
                get(3, 3) == side) {
                return true;
            }

            if (get(1, 3) == side &&
                get(2, 2) == side &&
                get(3, 1) == side) {
                return true;
            }

            return false;
        }

        boolean isDraw() {
            if (isWinning(FieldState.X) || isWinning(FieldState.O)) {
                return false;
            }
            for (int x = 1; x <= 3; x++) {
                for (int y = 1; y <= 3; y++) {
                    if (get(x, y) == FieldState.FREE) {
                        return false;
                    }
                }
            }
            return true;
        }

        static TicTacToeField parse(String fieldStr) {

            try {
                List<String> lines = fieldStr
                    .lines()
                    .map(String::strip)
                    .filter(e ->
                        e.startsWith("|")
                            && e.endsWith("|"))
                    .collect(Collectors.toList());

                for (String line : lines) {
                    if (line.length() != 9) {
                        throw new WrongAnswer("Line of Tic-Tac-Toe " +
                            "field should be 9 characters long\n" +
                            "found " + line.length() + " characters in \"" + line + "\"");
                    }
                    for (char c : line.toCharArray()) {
                        if (c != 'X'
                            && c != 'O'
                            && c != '|'
                            && c != ' '
                            && c != '_') {
                            return null;
                        }
                    }
                }

                FieldState[][] field = new FieldState[3][3];

                int y = 0;
                for (String line : lines) {
                    char[] cols = new char[] {
                        line.charAt(2),
                        line.charAt(4),
                        line.charAt(6)
                    };

                    int x = 0;
                    for (char c : cols) {
                        FieldState state = FieldState.get(c);
                        if (state == null) {
                            return null;
                        }
                        field[y][x] = state;
                        x++;
                    }
                    y++;
                }

                return new TicTacToeField(field);
            } catch (Exception ex) {
                return null;
            }
        }


        static List<TicTacToeField> parseAll(String output) {
            List<TicTacToeField> fields = new ArrayList<>();

            List<String> lines = output
                .lines()
                .map(String::strip)
                .filter(e -> e.length() > 0)
                .collect(Collectors.toList());

            String candidateField = "";
            boolean insideField = false;
            for (String line : lines) {
                if (line.contains("----") && !insideField) {
                    insideField = true;
                    candidateField = "";
                } else if (line.contains("----") && insideField) {
                    TicTacToeField field = TicTacToeField.parse(candidateField);
                    if (field != null) {
                        fields.add(field);
                    }
                    insideField = false;
                }

                if (insideField && line.startsWith("|")) {
                    candidateField += line + "\n";
                }
            }

            return fields;
        }

    }


    class Clue {
        int x, y;
        Clue(int x, int y) {
            this.x = x;
            this.y = y;
        }
    }

    public class TicTacToeTest extends StageTest<Clue> {

        static String[] inputs = new String[] {
            "1 1", "1 2", "1 3",
            "2 1", "2 2", "2 3",
            "3 1", "3 2", "3 3"
        };

        String iterateCells(String initial) {
            int index = -1;
            for (int i = 0; i < inputs.length; i++) {
                if (initial.equals(inputs[i])) {
                    index = i;
                    break;
                }
            }
            if (index == -1) {
                return "";
            }
            String fullInput = "";
            for (int i = index; i < index + 9; i++) {
                fullInput += inputs[i % inputs.length] + "\n";
            }
            return fullInput;
        }

        @Override
        public List<TestCase<Clue>> generate() {

            List<TestCase<Clue>> tests = new ArrayList<>();

            int i = 0;
            for (String input : inputs) {

                Random random = new Random();
                String randomInput = "";
                for (int j = 0; j < 10; j++) {
                    int randX = random.nextInt(4) + 1;
                    int randY = random.nextInt(4) + 1;
                    randomInput += randX + " " + randY + "\n";
                }

                String fullMoveInput = randomInput
                    + iterateCells(input) + iterateCells(input);

                String[] strNums = input.split(" ");
                int x = Integer.parseInt(strNums[0]);
                int y = Integer.parseInt(strNums[1]);

                if (i % 2 == 1) {
                    // mix with incorrect data
                    fullMoveInput = "4 " + i + "\n" + fullMoveInput;
                }

                String fullGameInput = "";
                for (int j = 0; j < 9; j++) {
                    fullGameInput += fullMoveInput;
                }

                tests.add(new TestCase<Clue>()
                    .setInput(fullGameInput)
                    .setAttach(new Clue(x, y)));

                i++;
            }

            return tests;
        }

        @Override
        public CheckResult check(String reply, Clue clue) {

            List<TicTacToeField> fields = TicTacToeField.parseAll(reply);

            if (fields.size() == 0) {
                return new CheckResult(false, "No fields found");
            }

            for (int i = 1; i < fields.size(); i++) {
                TicTacToeField curr = fields.get(i - 1);
                TicTacToeField next = fields.get(i);

                if (!(curr.equalTo(next) || curr.hasNextAs(next))) {
                    return new CheckResult(false,
                        "For two fields following each " +
                            "other one is not a continuation " +
                            "of the other (they differ more than in two places).");
                }
            }

            List<String> lines = reply
                .strip()
                .lines()
                .map(String::strip)
                .filter(e -> e.length() > 0)
                .collect(Collectors.toList());

            String lastLine = lines.get(lines.size() - 1);

            if (! (lastLine.contains("X wins")
                || lastLine.contains("O wins")
                || lastLine.contains("Draw")
            )) {
                return new CheckResult(false,
                    "Can't parse final result, " +
                        "should contain \"Draw\", \"X wins\" or \"O wins\".\n" +
                        "Your last line: \"" + lastLine + "\"");
            }

            if (lastLine.contains("X wins") && lastLine.contains("O wins")) {
                return new CheckResult(false,
                    "Your final result contains \"X wins\" and \"O wins\" " +
                        "at the same time. This is impossible.\n" +
                        "Your last line: \"" + lastLine + "\"");
            }

            if (lastLine.contains("X wins") && lastLine.contains("Draw")) {
                return new CheckResult(false,
                    "Your final result contains \"X wins\" and \"Draw\" " +
                        "at the same time. This is impossible.\n" +
                        "Your last line: \"" + lastLine + "\"");
            }

            if (lastLine.contains("O wins") && lastLine.contains("Draw")) {
                return new CheckResult(false,
                    "Your final result contains \"O wins\" and \"Draw\" " +
                        "at the same time. This is impossible.\n" +
                        "Your last line: \"" + lastLine + "\"");
            }

            TicTacToeField lastField = fields.get(fields.size() - 1);

            if (lastField.isWinning(FieldState.X) && !lastLine.contains("X wins")) {
                return new CheckResult(false,
                    "Your last field shows that X wins, " +
                        "and your last line should contain \"X wins\".\n" +
                        "Your last line: \"" + lastLine + "\"");
            }

            if (lastField.isWinning(FieldState.O) && !lastLine.contains("O wins")) {
                return new CheckResult(false,
                    "Your last field shows that O wins, " +
                        "and your last line should contain \"O wins\".\n" +
                        "Your last line: \"" + lastLine + "\"");
            }

            if (lastField.isDraw() && !lastLine.contains("Draw")) {
                return new CheckResult(false,
                    "Your last field shows that there is a draw, " +
                        "and your last line should contain \"Draw\".\n" +
                        "Your last line: \"" + lastLine + "\"");
            }

            if (lastField.isWinning(FieldState.X) ||
                lastField.isWinning(FieldState.O) ||
                lastField.isDraw()) {
                return CheckResult.correct();
            }

            return CheckResult.wrong(
                "Your last field contains unfinished game, the game should be finished!"
            );
        }
    }
  learner_created: false
- name: src/tictactoe/Util.kt
  visible: true
  text: |-
    package tictactoe

    object Util {
        private var sendToCheck = true

        fun ask(title: String): String {
            println(title)
            return readln().trim()
        }

        fun readln(): String {
            if (!sendToCheck) {
                print("> ")
            }
            return kotlin.io.readln()
        }

        fun disableToSend() { this.sendToCheck = false }
        fun enableToSend() { this.sendToCheck = true }
    }
  learner_created: true
- name: src/tictactoe/TicTacToe.kt
  visible: true
  text: |-
    package tictactoe

    const val MOVE_PLAYER_1 = 'X'
    const val MOVE_PLAYER_2 = 'O'
    const val MOVE_NOT_PLAY_YET = '_'

    class TicTacToe(val lines: Int, val cols: Int = lines) {
        private val board = Board(lines, cols)

        override fun toString(): String {
            return board.toString()
        }

        fun fillBoard(_moves: CharArray) {
            val moves = _moves.toMutableList().chunked(3)
            board.setBoard(moves)
        }

        fun drawTheBoard() = board.draw()

        fun checkWinner() {
            try {
                board.checkBoard(MOVE_PLAYER_1, MOVE_PLAYER_2).message.let(::println)
            } catch (e: IllegalMovesException) {
                e.message.let(::println)
            }
        }

        fun makeMove() {
            var makeMove = false
            var (first, second) = Pair(0, 0)
            do {
                try {
                    val list = Util.readln().trim().split("\\s+".toRegex()).map (String::toInt)
                    first = list.first()
                    second = list.last()
                } catch (_: NumberFormatException) {
                    "You should enter numbers!".let(::println)
                    continue
                }

                if (first !in 1..board.lines || second !in 1..board.cols) {
                    "Coordinates should be from 1 to %d!".format(cols).let(::println)
                    continue
                }

                makeMove = if (!board.`Check if its free to play`(first - 1, second - 1)) {
                    "This cell is occupied! Choose another one!".let(::println)
                    false
                } else {
                    board.playing(first - 1, second - 1 , MOVE_PLAYER_1)
                    true
                }

            } while (!makeMove)
        }
    }
  learner_created: true
- name: src/tictactoe/Board.kt
  visible: true
  text: |
    package tictactoe

    import kotlin.math.abs

    const val CELL_EMPTY = ' '

    const val BORDER_HORIZONTAL = "-"
    const val BORDER_VERTICAL = "|"

    data class Board(val lines: Int, val cols: Int = lines) {
        val board: MutableList<MutableList<Char>> = emptyList<MutableList<Char>>().toMutableList()
        override fun toString(): String {
            val drawing = StringBuilder()
            drawing.appendLine(BORDER_HORIZONTAL.repeat(cols * 2 + 3))
            this.board.forEach { it ->
                drawing.appendLine(
                    it.joinToString(
                        prefix = BORDER_VERTICAL.padEnd(2, CELL_EMPTY),
                        postfix = BORDER_VERTICAL.padStart(2, CELL_EMPTY),
                        separator = " ",
                        transform = { replaceEmptyCells(it) }
                    )
                )
            }
            drawing.appendLine(BORDER_HORIZONTAL.repeat(cols * 2 + 3))

            return drawing.toString()
        }

        fun draw() {
            toString().let(::print)
        }

        fun setMove(line: Int, col: Int, play: Char) {
            board[line][col] = play
        }

        fun setBoard(moves: List<List<Char>>) {
            var _moves: MutableList<MutableList<Char>> = mutableListOf()
            moves.forEach { _moves.add(it.toMutableList()) }
            board.addAll(_moves)
        }

        fun checkBoard(player1: Char, player2: Char): TicTacToeMove {
            var numMovesOfPlayer1 = 0
            var numMovesOfPlayer2 = 0
            board.forEach {
                numMovesOfPlayer1 += it.count { move -> move == player1 }
                numMovesOfPlayer2 += it.count { move -> move == player2 }
            }

            if (abs(numMovesOfPlayer2 - numMovesOfPlayer1) > 1) throw IllegalMovesException()

            val wins1: Boolean = checkWinner(player1)
            val wins2: Boolean = checkWinner(player2)
            if (wins1 && wins2) throw IllegalMovesException()


            return if (wins1) TicTacToeMove.PLAYER_1_WIN
                else
                    if (wins2) TicTacToeMove.PLAYER_2_WIN
                    else
                        if (numMovesOfPlayer1 + numMovesOfPlayer2 == lines * cols) TicTacToeMove.GAME_DRAW
                        else TicTacToeMove.GAME_NOT_ENDED
        }

        fun `Check if its free to play`(cordLine: Int, cordCol: Int): Boolean = board[cordLine][cordCol] == MOVE_NOT_PLAY_YET

        fun playing(cordLine: Int, cordCol: Int, move: Char) {
            this.board[cordLine][cordCol] = move
        }

        private fun replaceEmptyCells(_move: Char): CharSequence {
            return _move.toString().replace(MOVE_NOT_PLAY_YET, CELL_EMPTY)
        }

        private fun checkWinner(player: Char): Boolean {
            val size = board.size
            val rowWin = (0 until size).any { row -> board[row].all { it == player } }
            val colWin = (0 until size).any { col -> board.all { it[col] == player } }
            val diagWin = (0 until size).all { board[it][it] == player } || (0 until size).all { board[it][size - it - 1] == player }
            return rowWin || colWin || diagWin
        }
    }
  learner_created: true
- name: src/tictactoe/IllegalMovesException.kt
  visible: true
  text: |-
    package tictactoe

    const val ILLEGAL_MOVES = "Impossible"

    class IllegalMovesException(message: String = ILLEGAL_MOVES) : Exception(message) {}
  learner_created: true
- name: src/tictactoe/TicTacToeMove.kt
  visible: true
  text: |-
    package tictactoe

    enum class TicTacToeMove(val state: Char, val message: String) {
        PLAYER_1_WIN('X', "X wins"),
        PLAYER_2_WIN('O', "O wins"),
        GAME_DRAW('D', "Draw"),
        GAME_NOT_ENDED('G', "Game not finished");
    }
  learner_created: true
feedback_link: https://hyperskill.org/learn/step/10479#comment
status: Solved
feedback:
  message: Well done! You've finished the project. Select a new project on <a href="https://hyperskill.org/projects">Hyperskill</a>
    to continue learning.
  time: "Wed, 19 Apr 2023 13:35:16 UTC"
record: -1
